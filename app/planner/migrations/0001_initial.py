# Generated by Django 2.2.5 on 2019-10-02 17:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('short_name', models.SlugField(max_length=16)),
            ],
            options={
                'verbose_name': 'Vak',
                'verbose_name_plural': 'Vakken',
            },
        ),
        migrations.CreateModel(
            name='CourseMoment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('places', models.IntegerField(verbose_name='Plekken')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.Course', verbose_name='Vak')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': 'Toetsje',
                'verbose_name_plural': 'Toetsjes',
            },
        ),
        migrations.CreateModel(
            name='TestMoment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=16, verbose_name='Locatie')),
                ('date', models.DateField(verbose_name='Datum')),
                ('start_time', models.TimeField(verbose_name='Begintijd')),
                ('end_time', models.TimeField(verbose_name='Eindtijd')),
                ('test_length', models.IntegerField(default=15, verbose_name='Toetslengte')),
                ('hidden_from_total', models.BooleanField(default=False)),
                ('courses', models.ManyToManyField(related_name='test_moment', through='planner.CourseMoment', to='planner.Course', verbose_name='Vakken')),
            ],
            options={
                'verbose_name': 'Toetsmoment',
                'verbose_name_plural': 'Toetsmomenten',
            },
        ),
        migrations.AddField(
            model_name='coursemoment',
            name='time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.TestMoment', verbose_name='Toetsmoment'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(max_length=32, verbose_name='Naam')),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('date', models.DateField(verbose_name='Datum')),
                ('start_time', models.TimeField(verbose_name='Begintijd')),
                ('duration', models.IntegerField(verbose_name='Lengte')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='planner.Course', verbose_name='Vak')),
                ('tests', models.ManyToManyField(to='planner.Test', verbose_name='Toetsjes')),
            ],
            options={
                'verbose_name': 'Afspraak',
                'verbose_name_plural': 'Afspraken',
                'unique_together': {('email', 'date')},
            },
        ),
    ]
